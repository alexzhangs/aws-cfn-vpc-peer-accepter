{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create neccesary resources for the accepter of VPC peer connection.",
  "Resources": {
    "IamPeerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:AcceptVpcPeeringConnection",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SqsPeerRouteDeadQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Sub": "${AWS::StackName}-SqsPeerRouteDeadQueue"},
        "ReceiveMessageWaitTimeSeconds": "20",
        "VisibilityTimeout": "30"
      }
    },
    "SqsPeerRouteQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {"Fn::Sub": "${AWS::StackName}-SqsPeerRouteQueue"},
        "ReceiveMessageWaitTimeSeconds": "20",
        "VisibilityTimeout": "30",
        "RedrivePolicy": {
          "deadLetterTargetArn": {"Fn::GetAtt": ["SqsPeerRouteDeadQueue", "Arn"]},
          "maxReceiveCount": "3"
        }
      }
    },
    "SqsPeerRouteQueuePolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*"
            }
          ]
        },
        "Queues": [
          {"Ref": "SqsPeerRouteQueue"}
        ]
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateRoute",
                    "ec2:DeleteRoute"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ec2:*:*:route-table/",
                        {
                          "Ref": "RouteTableId"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaPeerRouteQueueSubscriber": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": { "ZipFile": { "Fn::Join": [ "", [
          "import json\n",
          "import boto3\n",
          "def edit_route_table(event, context):\n",
          "    print(event)\n",
          "    session = boto3.Session(region_name='", {"Ref": "AWS::Region"}, "')\n",
          "    ec2 = session.resource('ec2')\n",
          "    route_table = ec2.RouteTable('", {"Ref": "RouteTableId"}, "')\n",
          "    result = []\n",
          "    for record in event['Records']:\n",
          "        payload = record['body']\n",
          "        if isinstance(payload, dict):\n",
          "            pass\n",
          "        elif isinstance(payload, (str, unicode)):\n",
          "            payload = json.loads(payload)\n",
          "        else:\n",
          "            print('Invalid message payload found')\n",
          "            return false\n",
          "        request_type = payload['request_type']\n",
          "        if request_type == 'Create':\n",
          "            route = route_table.create_route(\n",
          "                DestinationCidrBlock=payload['peer_requester_cidr'],\n",
          "                VpcPeeringConnectionId=payload['peer_connection_id']\n",
          "            )\n",
          "            route = route.__dict__\n",
          "            route.pop('meta')\n",
          "            result.append(route)\n",
          "        elif request_type == 'Delete':\n",
          "            route = ec2.Route(route_table.id, payload['peer_requester_cidr'])\n",
          "            import botocore\n",
          "            try:\n",
          "                route.delete()\n",
          "                route = route.__dict__\n",
          "                route.pop('meta')\n",
          "                result.append(route)\n",
          "            except botocore.exceptions.ClientError as e:\n",
          "                if e.response['Error']['Code'] == 'InvalidRoute.NotFound':\n",
          "                    pass\n",
          "                else:\n",
          "                    raise e\n",
          "        print(result)\n",
          "    return result\n"
        ] ] } },
        "Handler": "index.edit_route_table",
        "Runtime": "python2.7",
        "Timeout": "15",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      },
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SqsPeerRouteQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaPeerRouteQueueSubscriber",
            "Arn"
          ]
        }
      },
    }
  },
  "Parameters": {
    "RouteTableId": {
      "Type": "String",
      "Default": "",
      "Description": "Route Table ID of the VPC peer accepter."
    }
  },
  "Outputs": {
    "IamPeerRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "IamPeerRole",
          "Arn"
        ]
      }
    },
    "SqsPeerRouteQueueUrl": {
      "Value": {
        "Ref": "SqsPeerRouteQueue"
      }
    }
  }
}
