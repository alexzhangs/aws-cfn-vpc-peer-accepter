{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create neccesary resources for the accepter of VPC peer connection.",
  "Resources": {
    "PeerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:AcceptVpcPeeringConnection",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "SqsQueueForPeerRoute": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {
          "Fn::Join": ["-", [{"Ref": "NS"}, "PeerRoute"]]
        },
        "ReceiveMessageWaitTimeSeconds": "20",
        "VisibilityTimeout": "30"
      }
    },
    "SqsQueuePolicyForPeerRoute": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": "*"
            }
          ]
        },
        "Queues": [
          {"Ref": "SqsQueueForPeerRoute"}
        ]
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes",
                    "sqs:ReceiveMessage"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "SqsQueueForPeerRoute",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:CreateRoute"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ec2:*:*:route-table/",
                        {
                          "Ref": "PeerAccepterRouteTableId"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "DependsOn": [
        "SqsQueueForPeerRoute"
      ]
    },
    "LambdaFunctionForPeerRoute": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "import json\n",
                "import boto3\n",
                "import logging\n",
                "logger = logging.getLogger()\n",
                "def edit_route_table(event, context):\n",
                "    logger.info('======')\n",
                "    logger.info(event)\n",
                "    logger.info('======')\n",
                "    session = boto3.Session(region_name='", {"Ref": "AWS::Region"}, "')\n",
                "    ec2 = session.resource('ec2')\n",
                "    route_table = ec2.RouteTable('", {"Ref": "PeerAccepterRouteTableId"}, "')\n",
                "    for record in event['Records']:\n",
                "        body = record['body']\n",
                "        if isinstance(body, str):\n",
                "            body = json.loads(body)\n",
                "        route = route_table.create_route(\n",
                "            DestinationCidrBlock=body['peering_requester_cidr'],\n",
                "            VpcPeeringConnectionId=body['peering_connection_id']\n",
                "        )\n",
                "        logger.info('======')\n",
                "        logger.info(route)\n",
                "        logger.info('======')\n",
                "    return route is not None\n"
              ]
            ]
          }
        },
        "Handler": "index.edit_route_table",
        "Runtime": "python2.7",
        "Timeout": "60",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LambdaExecutionRole",
        "SqsQueueForPeerRoute"
      ]
    },
    "EventSourceMapping": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SqsQueueForPeerRoute",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaFunctionForPeerRoute",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LambdaFunctionForPeerRoute"
      ]
    }
  },
  "Parameters": {
    "NS": {
      "Type": "String",
      "Default": "Foo",
      "Description": "Enter a Name Space for Stack. Default is 'Foo'."
    },
    "NSLowerCase": {
      "Type": "String",
      "Default": "foo",
      "Description": "Lower case of value of NS. Default is 'foo'."
    },
    "PeerAccepterRouteTableId": {
      "Type": "String",
      "Default": "",
      "Description": "Route Table ID of the owner of the accepter VPC."
    }
  },
  "Outputs": {
    "PeerRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "PeerRole",
          "Arn"
        ]
      }
    },
    "SqsQueueUrlForPeerRoute": {
      "Value": {
        "Ref": "SqsQueueForPeerRoute"
      }
    }
  }
}
